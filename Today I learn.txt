<Computer Science 개념 공부>

[10.13]
1. 컨테이너
- 클라이언트의 요청에 따른 리소스를 찾고 자바 코드를 html 코드로 변환하여 응답 및 전송해주는 임무 수행
 ex)Tomcat8.5


2. 통합 개발 환경(IDE)
- 코드를 작성하고 빌드해줄 수 있는 툴
 ex)이클립스


3. 컴파일
- 작성한 소스 코드(.java)는 자바 컴파일러의 컴파일 과정을 통해 자바가상머신(JVM)이 
  인식할 수 있는 바이트 코드를 생성해내고, 이렇게 만들어진 파일(.class)을 자바런처가 
  execute(실행)하게 된다.


4. 서블릿과 JSP 비교
- Servelt : 자바 코드에 html 삽입(용도 : 처리)
  + 서블릿 파일은 HttpServletRequest객체를 이용하여, Parameter값을 얻음.
  + 파라미터 이외에는 데이터 전송과 관련한 다른 선택 가능한 수단이 없다. 파라미터는 곧 주소다.
- JSP : html 내에 자바 코드 삽입(용도 : 출력)


5. 데이터 전송 : Servlet -> JSP
-애트리뷰트(attribute)를 이용한다. 이 과정에서 파라미터는 잘 사용되지 않는다.
-전송
  request.setAttribute("속성명", 데이터); 
  session.setAttribute("속성명", 데이터)
-처리
  (변경할 타입명)request.getAttribute("속성명");
  (변경할 타입명)session.getAttribute("속성명");


6. 패턴 Pattern
-FrontController 패턴 :여러 개의 요청을 하나의 Servlet 이 처리

-Model 1 패턴 :일반적으로 모든 코드를 JSP에 작성

-Model 2 패턴 :출력은 JSP가 수행하고, 처리는 Servlet이 수행
 유지보수가 쉽지만, 구조가 복잡함, 대규모 프로젝트에 이용

-MVC 패턴 : 데이터를 만드는 부분(model)과 데이터를 출력하는 부분(view) 및 
 연결하는 부분(Controller)을 별도의 객체로 처리함
 이 모든 과정은 독립성을 갖도록 해서 유지보수를 용이하게 하기 위함임
 보통 Model2 MVC 패턴을 만든다.



[10.17]
1.JAVA의 특징
- 플랫폼에 독립적인 객체지향언어
- 개발환경에 제약받지 않고, 어느 플랫폼에서나 코드의 호환성과 재사용이 자유로움
- 동적 로딩을 지원(객체가 필요한 시점에 클래스를 동적 로딩하여 생성)
- 운영체제에 독립적 즉 프로그램을 다시 컴파일 할 필요 없이 실행 가능함


2.JDK 1.5 부터 추가된 항목
- 확장 for문, 비정형 인자, 제네릭, 오토박싱, 오토언박싱, 어노테이션 등


3.Overloading(메소드 중복정의)과 Overriding(메소드 재정의)
- 오버로딩 : 기존 메소드의 인자를 이용하여 하나의 함수에 여러 기능을 만드는 것
- 오버라이딩 : 상위 클래스에 있는 메소드와 똑같은 메소드를 하위 클래스에서 다시 만드는 행위
               즉, 하위 클래스에서 메소드를 재정의하는 것을 말한다(다형성)


4.객체(object)
- 클래스에 정의된 내용대로 메모리에 생성된 것


5.클래스
- 객체를 만드는 설계도, 객체를 생성하는 틀

 
6.객체와 인스턴스
- 클래스로부터 객체를 만드는 과정을 '클래스의 인스턴스화'라고 함
- 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 함

 
7.객체 지향 프로그래밍(OOP, Object-Oriented Programming)
- 컴퓨터 프로그램을 여러 개의 독립된 단위, 즉 객체들의 모임으로 파악하고자 함
- 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있음

 
8.캡슐화(Encapsulation)
- 하나의 문제를 해결하기 위한 데이터와 메소드를 하나의 단위로 묶는다는 것
- 클래스의 내부 정의에 대해 외부에서 볼 수 없도록 하는 것이 특징(은닉화)

 
9.추상화(Abstraction)
- 모델(Object)의 자세한 성질을 숨기고 일반적인 성질을 나타내는 것
- 일반적으로 클래스는 클래스로 표현할 서브클래스(또는 객체)의
  공통적인 성질과 행위를 일반화하여 디자인되며,
  그로부터 생성된 객체는 자신의 고유의 성질을 가지게 됨.

 
10.다형성(Polymorphism)
- 같은 메시지에 대해 클래스에 따라 다른 행위를 하게 되는 특징
- 일반적으로 같은 이름을 가지는 메소드에 대해 인자(Argument)의 개수와 
  데이터형(Data Type)에 따라 수행되는 행위가 달라진다. 
- 다형성을 통해서 사용자는 약속된 인터페이스를 따르는 서로 다른 객체를 같은 방식으로 사용할 수 있게 된다.


11.매개변수 vs 인자
- 매개변수(파라미터 또는 parameter)는 함수 이름 뒤에 괄호안에 선언하는 변수이고, 
- 인자(인수 또는 argument)는 함수 호출시 전달하는 값을 말한다. 

 
12.상속(Inheritance)
- 기존에 있던 클래스를 바탕으로 다른 특성을 추가하여 새로운 클래스를 만들 수 있음
 

13.인스턴스(Instance)
- 추상화 개념 또는 클래스 객체, 컴퓨터 프로세스 등과 같은 템플릿(형식, 틀, 모형)이 실제 구현된 것


14.예외 처리의 필요성과 목적
- 자바에서 프로그램의 실행 도중, 예외가 발생하면 발생된 그 시점에서 프로그램이 바로 종료된다.
  하지만 가벼운 예외이거나 예상 가능한 예외의 경우일 수도 있으므로 '예외 처리'라는 수단이 제안되었고,
  예외 처리를 통해 우선 프로그램의 비정상적인 종료를 막고 발생한 예외에 대한 처리로 정상적인 프로그램을 
  계속 진행할 수 있도록 하는 것이 예외 처리의 필요성이라 할 수 있다.
- 예외의 발생으로 실행 중인 프로그램의 갑작스러운 비정상 종료를 막고, 
  정상적인 실행 상태를 유지할 수 있도록 하는 것


15.추상화
- 자바에서 공통의 속성, 기능을 묶어 이름을 붙이는 것을 의미한다.
- 자바에서 추상화는 추상클래스, 인터페이스를 통해 구현된다.


16.추상(abstract) 클래스
- 추상 메소드를 하나 이상 가지는 클래스
- 'new'로 객체를 생성할 수 없음
- 상속받은 클래스는 추상 메소드를 구현해야만 인스턴스를 생성할 수 있음
  (추상 클래스끼리의 상속은 메소드 재정의가 필요 없음, 사용할 때 일반 클래스에서 재정의)
- 추상 메소드란, 함수의 리턴 타입과 파라미터만 있고 정의 부분이 없는 함수를 말함.


17.인터페이스
- 클래스들이 구현해야 하는 동작을 지정하는데 사용되는 추상 자료형
- 상수 또는 추상 메소드만 정의할 수 있으며, 구현된 메소드는 포함할 수 없음
- 모든 변수는 static이고 final 임
- 자식 클래스들이 공통된 메소드를 포함하도록 함
- 다중 상속이 가능


18.추상 클래스와 인터페이스의 공통점
- 객체를 발생시킬수 없음
- 상속하여 하위 클래스를 통해 객체를 발생시킴
- 메소드를 재정의해야 함


19.String vs StringBuffer vs StringBuilder
- String 클래스 : 상수 문자열, 한번 생성한 후 변하지 않는 문자열 용도
- StringBuffer 클래스 : 프로그램 내에서 계속 변하는 문자열 용도
- StringBuilder 클래스 : StringBuilder 는 Java5에서 추가된 클래스로 StringBuffer 와 기능이 같다. 
  차이점은 스트링버퍼는 동기화가 되지만 스트링빌더는 그렇지 않다는 것이다. 
  즉, 스트링빌더는 다중 thread 에서는 안전하지 않으므로 동기화가 필요한 경우에는 
  스트링버퍼를 사용하는 것이 좋다.


20.Stream
- 데이터를 목적지로 입출력하기 위한 방법
- 스트림에 데이터를 쓰고 읽을 수 있음
- 스트림은 FIFO(First In First Out)구조로 읽기와 쓰기가 동시에 되지 않음
- 읽기, 쓰기가 필요하다면 읽는 스트림과 쓰는 스트림을 각각 하나씩 열어 사용해야 함


21. Statement vs PreparedStatement
- Statement
:정적 쿼리 시 사용
 매번 parsing(=구문 분석) 과정을 거쳐야 하므로 부하가 생길 수 있음
 SQL문 전체를 명확히 알 수 있어서 디버깅(=프로그래밍에서 잘못된 부분을 찾아 고치는 것)이 쉬움
- PreparedStatement
:동적 쿼리 시 사용
 한번 parsing하면 동일한 sql문장을 곧바로 파싱 과정 없이 실행(Execution)할 수 있음
 반복적인 다량의 sql 수행 시 성능상 이득이 있음
 오류 발생 시 변수에 입력되는 값을 알 수 없어서 디버깅이 어려움 
 

22.Java Beans
- 자바에서 컨포넌트를 이용하는 데 활용되는 기술
- 컴포넌트를 사용하면 좋은 이유는 필요할 때마다 가져다가 사용할 수 있다는 점인데
  JSP에서 자바의 컴포넌트를 이용해서 프로그래밍하는 것을 빈즈 프로그래밍이라 함.


23.컴포넌트
- 프로그래밍에 있어 재사용이 가능한 각각의 독립된 모듈을 의미함


24.Connection Pool
- 미리 생성해 놓은 커넥션을 할당하고 반납함으로써 커넥션 생성 시간을 줄인다는 개념
- 미리 생성할 때 너무 조금 생성하면 타임 오버헤드가 늘어나고, 
  반대로 너무 많이 생성하면 메모리 오버헤드가 늘어난다.


25. Singleton
- 프로그래밍 디자인 패턴
- 발전된 형태의 전역 변수 개념
- 프로그램상에서 두 번째 인스턴스를 만들 수 없게 하는 기능
- 만들어진 클래스의 객체를 단 하나만 사용하며 어디서든 그 객체를 사용할 수 있도록 만듬


26.WAS(Web Application Server)
- 서버와 클라이언트 사이에 있는 3-tier 방식
- Server가 처리하는 양이 많아지면서 Server 에 생기는 부하를 해결하기 위해 개발됨
- Client 에서 요청이 들어오면 실제적인 처리는 WAS가 하고 
  서버는 단지 Client 에 결과 값을 뿌려주는 역할만 하게 됨
- 대표적으로 톰캣, 웹스피어, 웹로직, 제우스 등이 있음






